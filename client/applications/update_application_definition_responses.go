// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kubermatic/go-kubermatic/models"
)

// UpdateApplicationDefinitionReader is a Reader for the UpdateApplicationDefinition structure.
type UpdateApplicationDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateApplicationDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateApplicationDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateApplicationDefinitionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateApplicationDefinitionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateApplicationDefinitionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateApplicationDefinitionOK creates a UpdateApplicationDefinitionOK with default headers values
func NewUpdateApplicationDefinitionOK() *UpdateApplicationDefinitionOK {
	return &UpdateApplicationDefinitionOK{}
}

/*
UpdateApplicationDefinitionOK describes a response with status code 200, with default header values.

ApplicationDefinition
*/
type UpdateApplicationDefinitionOK struct {
	Payload *models.ApplicationDefinition
}

// IsSuccess returns true when this update application definition o k response has a 2xx status code
func (o *UpdateApplicationDefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update application definition o k response has a 3xx status code
func (o *UpdateApplicationDefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application definition o k response has a 4xx status code
func (o *UpdateApplicationDefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update application definition o k response has a 5xx status code
func (o *UpdateApplicationDefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update application definition o k response a status code equal to that given
func (o *UpdateApplicationDefinitionOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateApplicationDefinitionOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionOK  %+v", 200, o.Payload)
}

func (o *UpdateApplicationDefinitionOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionOK  %+v", 200, o.Payload)
}

func (o *UpdateApplicationDefinitionOK) GetPayload() *models.ApplicationDefinition {
	return o.Payload
}

func (o *UpdateApplicationDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplicationDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateApplicationDefinitionUnauthorized creates a UpdateApplicationDefinitionUnauthorized with default headers values
func NewUpdateApplicationDefinitionUnauthorized() *UpdateApplicationDefinitionUnauthorized {
	return &UpdateApplicationDefinitionUnauthorized{}
}

/*
UpdateApplicationDefinitionUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type UpdateApplicationDefinitionUnauthorized struct {
}

// IsSuccess returns true when this update application definition unauthorized response has a 2xx status code
func (o *UpdateApplicationDefinitionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update application definition unauthorized response has a 3xx status code
func (o *UpdateApplicationDefinitionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application definition unauthorized response has a 4xx status code
func (o *UpdateApplicationDefinitionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update application definition unauthorized response has a 5xx status code
func (o *UpdateApplicationDefinitionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update application definition unauthorized response a status code equal to that given
func (o *UpdateApplicationDefinitionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateApplicationDefinitionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionUnauthorized ", 401)
}

func (o *UpdateApplicationDefinitionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionUnauthorized ", 401)
}

func (o *UpdateApplicationDefinitionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateApplicationDefinitionForbidden creates a UpdateApplicationDefinitionForbidden with default headers values
func NewUpdateApplicationDefinitionForbidden() *UpdateApplicationDefinitionForbidden {
	return &UpdateApplicationDefinitionForbidden{}
}

/*
UpdateApplicationDefinitionForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type UpdateApplicationDefinitionForbidden struct {
}

// IsSuccess returns true when this update application definition forbidden response has a 2xx status code
func (o *UpdateApplicationDefinitionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update application definition forbidden response has a 3xx status code
func (o *UpdateApplicationDefinitionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update application definition forbidden response has a 4xx status code
func (o *UpdateApplicationDefinitionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update application definition forbidden response has a 5xx status code
func (o *UpdateApplicationDefinitionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update application definition forbidden response a status code equal to that given
func (o *UpdateApplicationDefinitionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateApplicationDefinitionForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionForbidden ", 403)
}

func (o *UpdateApplicationDefinitionForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinitionForbidden ", 403)
}

func (o *UpdateApplicationDefinitionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateApplicationDefinitionDefault creates a UpdateApplicationDefinitionDefault with default headers values
func NewUpdateApplicationDefinitionDefault(code int) *UpdateApplicationDefinitionDefault {
	return &UpdateApplicationDefinitionDefault{
		_statusCode: code,
	}
}

/*
UpdateApplicationDefinitionDefault describes a response with status code -1, with default header values.

errorResponse
*/
type UpdateApplicationDefinitionDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update application definition default response
func (o *UpdateApplicationDefinitionDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this update application definition default response has a 2xx status code
func (o *UpdateApplicationDefinitionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update application definition default response has a 3xx status code
func (o *UpdateApplicationDefinitionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update application definition default response has a 4xx status code
func (o *UpdateApplicationDefinitionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update application definition default response has a 5xx status code
func (o *UpdateApplicationDefinitionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update application definition default response a status code equal to that given
func (o *UpdateApplicationDefinitionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *UpdateApplicationDefinitionDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinition default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateApplicationDefinitionDefault) String() string {
	return fmt.Sprintf("[PUT /api/v2/applicationdefinitions/{appdef_name}][%d] updateApplicationDefinition default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateApplicationDefinitionDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateApplicationDefinitionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
