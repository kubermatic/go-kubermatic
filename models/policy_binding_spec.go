// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyBindingSpec PolicyBindingSpec describes how and where to apply the referenced PolicyTemplate.
//
// swagger:model PolicyBindingSpec
type PolicyBindingSpec struct {

	// NamespacedPolicy is a boolean to indicate if the policy binding is namespaced
	NamespacedPolicy bool `json:"namespacedPolicy,omitempty"`

	// Scope specifies the scope of the policy.
	// Can be one of: global, project, or cluster
	//
	// +kubebuilder:validation:Enum=global;project;cluster
	Scope string `json:"scope,omitempty"`

	// policy template ref
	PolicyTemplateRef *ObjectReference `json:"policyTemplateRef,omitempty"`

	// target
	Target *PolicyTargetSpec `json:"target,omitempty"`
}

// Validate validates this policy binding spec
func (m *PolicyBindingSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyTemplateRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBindingSpec) validatePolicyTemplateRef(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyTemplateRef) { // not required
		return nil
	}

	if m.PolicyTemplateRef != nil {
		if err := m.PolicyTemplateRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyTemplateRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyTemplateRef")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyBindingSpec) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy binding spec based on the context it is used
func (m *PolicyBindingSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyTemplateRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyBindingSpec) contextValidatePolicyTemplateRef(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyTemplateRef != nil {
		if err := m.PolicyTemplateRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyTemplateRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyTemplateRef")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyBindingSpec) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyBindingSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyBindingSpec) UnmarshalBinary(b []byte) error {
	var res PolicyBindingSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
