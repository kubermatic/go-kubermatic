// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyTemplateSpec policy template spec
//
// swagger:model PolicyTemplateSpec
type PolicyTemplateSpec struct {

	// Category is the category of the policy, specified as an annotation in the Kyverno policy
	//
	// +optional
	Category string `json:"category,omitempty"`

	// Default determines whether we apply the policy (create policy binding)
	//
	// +optional
	Default bool `json:"default,omitempty"`

	// Description is the description of the policy, specified as an annotation in the Kyverno policy
	Description string `json:"description,omitempty"`

	// Enforced indicates whether this policy is mandatory
	//
	// If true, this policy is mandatory
	// A PolicyBinding referencing it cannot disable it
	Enforced bool `json:"enforced,omitempty"`

	// ProjectID is the ID of the project for which the policy template is created
	//
	// Relevant only for project visibility policies
	// +optional
	ProjectID string `json:"projectID,omitempty"`

	// Severity indicates the severity level of the policy
	//
	// +optional
	Severity string `json:"severity,omitempty"`

	// Title is the title of the policy, specified as an annotation in the Kyverno policy
	Title string `json:"title,omitempty"`

	// Visibility specifies where the policy is visible.
	//
	// Can be one of: global, project, or cluster
	// +kubebuilder:validation:Enum=global;project;cluster
	Visibility string `json:"visibility,omitempty"`

	// policy spec
	PolicySpec RawExtension `json:"policySpec,omitempty"`
}

// Validate validates this policy template spec
func (m *PolicyTemplateSpec) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy template spec based on context it is used
func (m *PolicyTemplateSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyTemplateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyTemplateSpec) UnmarshalBinary(b []byte) error {
	var res PolicyTemplateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
